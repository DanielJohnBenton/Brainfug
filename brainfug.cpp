#include <iostream>
#include <vector>
#include <map>
#include "conio.h"

#define DEFUG false

using namespace std;

void Error(string message, signed int position)
{
	cout <<"Error: "<< message <<" Character: "<< position << endl;
}

void Error(string message)
{
	cout <<"Error: "<< message << endl;
}

/*
	>	Move the pointer to the right
	<	Move the pointer to the left
	+	Increment the memory cell under the pointer
	-	Decrement the memory cell under the pointer
	.	Output the character signified by the cell at the pointer
	,	Input a character and store it in the cell at the pointer
	[	Jump past the matching ] if the cell under the pointer is 0
	]	Jump back to the matching [ if the cell under the pointer is nonzero
*/
void Brainfug(string code)
{
	vector< signed int > stuff;
	stuff.push_back(0);
	
	signed int position = 0;
	
	map< unsigned int, unsigned int > loops;
	
	signed int loop = 0;
	
	int lCode = code.length();
	
	for(int i = 0; i < lCode; i++)
	{
		char c = code.at(i);
		
		if(c == '[')
		{
			loop++;
			
			loops[i] = loop;
		}
		else if(c == ']')
		{
			loop--;
			
			loops[i] = loop;
		}
	}
	
	if(loop != 0)
	{
		Error("Unopened or unclosed loop detected.");
		return;
	}
	
	for(signed int i = 0; i < lCode; i++)
	{
		char c = code.at(i);
		
		switch(c)
		{
			case '>':
			{
				position++;
				
				if(position >= stuff.size())
				{
					stuff.push_back(0);
				}
				
				break;
			}
			
			case '<':
			{
				position--;
				
				if(position < 0)
				{
					Error("Cannot point to a position before 0.", i);
					return;
				}
				
				break;
			}
			
			case '+':
			{
				stuff[position]++;
				
				break;
			}
			
			case '-':
			{
				stuff[position]--;
				
				break;
			}
			
			case '.':
			{
				cout << (char)stuff[position];
				
				break;
			}
			
			case ',':
			{
				stuff[position] = getch();
				
				break;
			}
			
			case '[':
			{
				unsigned int t = loops[position];
				
				if(stuff[position] == 0)
				{
					unsigned int xLoop = t;
					
					while(xLoop != (t - 1))
					{
						i++;
						
						//cout << t << " : "<< xLoop << endl;
						
						if(i >= lCode)
						{
							Error("Went beyond code.", i);
							
							return;
						}
						
						if(code.at(i) == '[')
						{
							xLoop++;
						}
						if(code.at(i) == ']')
						{
							xLoop--;
						}
					}
				}
				
				break;
			}
			
			case ']':
			{
				unsigned int t = loops[position];
				
				if(stuff[position] != 0)
				{
					unsigned int xLoop = t;
					
					while(xLoop != (t + 1))
					{
						i--;
						
						if(code.at(i) == '[')
						{
							xLoop++;
						}
						if(code.at(i) == ']')
						{
							xLoop--;
						}
					}
				}
				
				break;
			}
			
			default:
			{
				cout <<".";
				break;
			}
		}
	}
	
	if(DEFUG)
	{
		cout << endl <<"| ";
		for(int i = 0; i < stuff.size(); i++)
		{
			cout << stuff[i] <<" | ";
		}
	}
}

int main()
{
	// const string hello = "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.";
	// https://esolangs.org/wiki/Brainfuck#Hello.2C_World.21
	//const string hello = "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.";
	// const string hello = ",[.,]";
	
	// 99 bottles http://www.99-bottles-of-beer.net/language-brainfuck-2542.html
	const string hello = "+>+++++++[>>>++++++++<<<<++++++++>-]+++++++++>>>+>>++++++++++[>++++++++++<-]>[>>+>+>+>+>+>+>+>>+>+>>+>+>+>+>>+>+>>+>+>+>>+>+>+>+>>>>>+>+>+>+>>+>+>+>>+>+>+>+>>+>+>+>>+>+>+>+>>+>+>>+>+>+>+>+>+>>>>+>+>>+>+>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-]<++++[>++++++++<-]>[>+>>>>>>>>+>>>+>>>>>+>>>+>>>>+>>>>>+>+>>+>>>>>+>>>>+>>>>>+>>>>+>>>>>+>>>+>>>>>>>+>+>+>>>+>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-]+++++[>>>++>+++>+++>++>>+++>>++>>>>>>+++>>++>++>>+++>+>>>++++>->++>++>++>+++>++>>--->->+>>>++>++>>>>++>++++>++>>->++>>>++>->+++>+++>>+>+++>>>+++>++>+++>++>>>++>>++>++>>++>++>+++<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-]>>-->+>+>+>-->+>>>+>++>>-->+>+>->>+>>>+>->+>>->++>-->-->++>->>>->++>++>+>>+>>+>>>+>->>>++>>>>++>++>>>>>+>>++>->+>++>>>>+++>>>+>>->+>->+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[>>>>++++++++++[->[-]+>[-]<<[<<<<<.>>>>.>>>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>>.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<.>>>>.>>>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>>>>>>>>>>>>>.>.>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<.>>>>-.>>>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>.>..<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-]>[<<<<<->[-]+>[-]<<[<.>>>>.>>>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>>.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<.>>>>.>>>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>>>>>>>>>>>>>.>.>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-.>>>>+++++++++.>>>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>.>..<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-]>[<<.>>>>.>>>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>>.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<.>>>>.>>>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>>>>>>>>>>>>>.>.>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+++++++++.>>>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>.>..<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<->]<<+>>>>>->]<<]<<<<-]>>>>++++++++[->[-]+>[-]<<[<.>>>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>>.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<.>>>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>>>>>>>>>>>>>.>.>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-.>>>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>.>..<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-]>[<<.>>>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>>.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<.>>>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>>>>>>>>>>>>>.>.>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-.>>>>.>.>.>.>.>.>.>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>.>..<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<->]<<]<.>>>>.>.>.>.>.>.>.>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>>.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<.>>>>.>.>.>.>.>.>.>>.>.>.>.>.>.>.>.>>>>>>>>>>>>>>.>.>>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>>.>";
	
	Brainfug(hello);


	return 0;
}
